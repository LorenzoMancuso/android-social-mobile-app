module prova


// Vale sempre il primo valore mai assunto dall'argomento.
def constant(value) {
    rep (old <- value) { old }
}


// Calcolo di distanze approssimato (gradiente).
// isSource: se il device corrente e' una sorgente
// metric:   funzione che calcola la distanza dispetto ai vicini del device corrente
// returns:  la lunghezza del cammino minimo nella rete verso una sorgente
def gradient(isSource, metric) {
	// inizializzo la distanza a infinito
	rep (distance <- Infinity) {
		mux (isSource) {
			// le sorgenti hanno distanza 0
			0
		} else {
			// gli altri il minimo dei valori dei vicini sommati alla loro distanza relativa
			minHood(nbr(distance) + metric.apply())
		}
	}
}


def main() {
    env.put("language", "protelis");


    // la sorgente e' il nodo 0 (fermo nel mezzo)
    let sourceID = 0;
    let deviceID = self.getDeviceUID().getId();
    let isSource = (deviceID == sourceID);


    // salvo la stima di distanza e quella esatta
    env.put("distance", self.distanceTo(sourceID));                   // distanza euclidea esatta
    env.put("gradient", gradient(isSource, () -> {self.nbrRange()})); // distanza tramite gradiente


    // determino un tempo in cui iniziare a muovermi a caso tra 0 e 200
    let timeToGo = constant(200*self.nextRandomDouble());
    env.put("timeToGo", timeToGo); // lo memorizzo


    // determino un luogo in cui muovermi, se e' il momento di farlo
    if (self.getCurrentTime() < timeToGo) {
        // non e' ancora ora, e non faccio nulla
        0
    } else {
        // scelgo un obiettivo a caso tra [-4,-2] e [4,2]
        let target = constant([8*self.nextRandomDouble()-4, 4*self.nextRandomDouble()-2]);
        env.put("target", target);
        0
    };
}

main()
